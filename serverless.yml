# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: products-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs14.x

  # you can overwrite defaults here
  #  stage: dev
  #  region: us-east-1

  # you can add statements to the Lambda function's IAM Role here
  #  iamRoleStatements:
  #    - Effect: "Allow"
  #      Action:
  #        - "s3:ListBucket"
  #      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
  #    - Effect: "Allow"
  #      Action:
  #        - "s3:PutObject"
  #      Resource:
  #        Fn::Join:
  #          - ""
  #          - - "arn:aws:s3:::"
  #            - "Ref" : "ServerlessDeploymentBucket"
  #            - "/*"

  iam:
    role:
      statements:
        - Effect: Allow
          Action: "iam:*"
          Resource: "*"
    deploymentRole: arn:aws:iam::799365443517:role/LabRole

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  createProduct:
    handler: src/handlers.createProduct
    events:
      - httpApi:
          path: /product
          method: post
    role: arn:aws:iam::799365443517:role/LabRole
  getProduct:
    handler: src/handlers.getProduct
    events:
      - httpApi:
          path: /product/{id}
          method: get
    role: arn:aws:iam::799365443517:role/LabRole
  updateProduct:
    handler: src/handlers.updateProduct
    events:
      - httpApi:
          path: /product/{id}
          method: put
    role: arn:aws:iam::799365443517:role/LabRole
  deleteProduct:
    handler: src/handlers.deleteProduct
    events:
      - httpApi:
          path: /product/{id}
          method: delete
    role: arn:aws:iam::799365443517:role/LabRole
  listProduct:
    handler: src/handlers.listProduct
    events:
      - httpApi:
          path: /products
          method: get
    role: arn:aws:iam::799365443517:role/LabRole
  crypto:
    handler: src/handlers.crypto
    events:
      - httpApi:
          path: /crypto
          method: get
    role: arn:aws:iam::799365443517:role/LabRole
  createCrypto:
    handler: src/handlers.createCrypto
    events:
      - httpApi:
          path: /createcrypto
          method: get
    role: arn:aws:iam::799365443517:role/LabRole
  createCryptoMonth:
    handler: src/handlers.createCryptoMonthly
    events:
      - httpApi:
          path: /createcryptoMonth
          method: post
    role: arn:aws:iam::799365443517:role/LabRole
  createCryptoDaily:
    handler: src/handlers.createCryptoDaily
    events:
      - httpApi:
          path: /createcryptoDaily
          method: get
    role: arn:aws:iam::799365443517:role/LabRole
  twitter:
    handler: src/handlers.searchTweets
    events:
      - httpApi:
          path: /twitter
          method: get
    role: arn:aws:iam::799365443517:role/LabRole
  listprod:
    handler: src/websocket.listProd
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
    role: arn:aws:iam::799365443517:role/LabRole
  # func0:
  #   role: arn:aws:iam::597685887388:role/LabRole

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

plugins:
  - serverless-plugin-typescript
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#        Value: "Some output value"
resources:
  Resources:
    cryptoData:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: cryptoData
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: cryptoTimestamp
            AttributeType: S
          - AttributeName: currency
            AttributeType: S
        KeySchema:
          - AttributeName: cryptoTimestamp
            KeyType: HASH
          - AttributeName: currency
            KeyType: RANGE
    tweets:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: tweet
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: tweetTimestamp
            AttributeType: S
          - AttributeName: currency
            AttributeType: S
        KeySchema:
          - AttributeName: tweetTimestamp
            KeyType: HASH
          - AttributeName: currency
            KeyType: RANGE
