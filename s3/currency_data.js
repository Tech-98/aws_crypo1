//Prices update every second
let timeInterval = 1000;

//Number of data points to generate
let numTimeIntervals = 100;

var price = [];
var ts = [];
const currencyData = [{ name: "bitcoin", x: [], y: [] }]

let connection = new WebSocket("wss://8l4cwqyls2.execute-api.us-east-1.amazonaws.com/production");

//Log connected response
connection.onopen = function (event) {
    console.log("Connected: " + JSON.stringify(event));
    sendMessage("bitcoin");
};

//Output messages from the server
connection.onmessage = function (msg) {

    //  data = JSON.stringify(msg.data);
    data = JSON.parse(msg.data);

    data.sort((a, b) => (a.ts > b.ts) ? 1 : ((b.ts > a.ts) ? -1 : 0))
    let count = 0
    price =[];
    ts = [];
    data.forEach(i => {

        // index = Number(i.ts)-1586131200000;
        price[count] = Number((i.price));
        ts[count] = new Date(Number(i.ts));
        // ts[count] = Number(i.ts);

        console.log("index:" + count + "price:" + price[count] + "ts:" + ts[count]);

        count++
    })

    console.log(count);
    console.log("lenght: " + data.lenght);
    // for(i = 0 ; i < msg.data.lenght ) {
    //     console.log("price:" +i.price +"ts:" +i.ts);
    //     price[]
    // })
    console.log("data:" + JSON.stringify(msg.data));
    console.log("-------------------------")

}

//Log errors
connection.onerror = function (error) {
    console.log("WebSocket Error: " + JSON.stringify(error, ["message", "arguments", "type", "name"]));
}

function sort(arr) {

    let temp;
    let tempsmall;
    let arrayData = [];

    while (j > tempsmall && j < temp)
        for (i = 0; i < arr.lenght; i++) {


        }
    return arrayData;
}

//Send message to server
function sendMessage(msgText) {
    //Get text from form
    // let msgText = document.forms[0].inputString.value;

    //Create message to be sent to server
    let msgObject = {
        action: "sendMessage",//Used for routing in API Gateway
        data: msgText
    };

    //Send message
    // connection.send(JSON.stringify(msgObject));

    connection.send(msgText);

    

    currencyData[0].name = msgText;

    //Log result
    console.log("Message sent: " + msgText);
}
//Add dummy data for four currencies
function getCurrencyData() {

    //Create Date class so we can obtain a starting timestamp
    let date = new Date();

    //Starting point for generation of data
    let startTimestamp = date.getTime();

    //Names of currencies, their average prices and arrays to store the generated x and y values

    const btc = [6788.048272605917, 11066.306240590267, 6860.17853570111, 41754.16660435275, 55721.166052695626, 6856.456278354705, 45652.06012506926, 57353.86147197248, 54810.6138506792, 58213.926293744385, 8883.691769863415, 9708.439858793108, 32582.10944502123, 54991.81484262107, 8752.617087745832, 38007.83222908396, 37059.979402287514, 7127.511949689152, 59428.967566027764, 10328.866065987393, 9235.716302064242, 61471.86846276259, 53978.80554728962, 11733.278970862082, 6913.158787469097, 9071.3850427828, 38397.895985418174, 39151.316183800314, 57788.86810329514, 44184.447511676175, 26476.130137019492, 13441.878496031612, 10627.976063963179, 16095.561510630652, 36933.520137309126, 46696.30469946678, 7297.635558289496, 41165.63506140341, 39316.16207578596, 10765.300521660893, 42752.1681545072, 30913.695736053804, 58771.881689509355, 39406.934244116186, 47135.43199562694, 50004.76218313686, 9170.361063506127, 42254.738123237206, 60273.86667694734, 49972.795398372444, 32676.38380096018, 50051.078348674855, 9515.243858655718, 9432.172515827939, 42491.97839335905, 43980.707382090906, 54700.273439277444, 15335.342198178862, 44980.898214810935, 11861.83657727968, 9767.00531665552, 37276.839558174994, 55805.32924923426, 38642.4422973396, 57169.37199381056, 41493.690050910525, 32163.824935335215, 59060.02678333801, 9589.81771944117, 35180.435462830384, 39977.75693922764, 34775.07941347281, 41837.41313797566, 23518.31842054723, 42608.41001195019, 44574.32057099816, 10923.32666818137, 46941.29208582354, 10952.249969107099, 11901.776488302461, 37101.351593780935, 19091.524181728702, 39090.202153609054, 58801.194843878126, 10681.993848113701, 39468.35477300189, 47191.86838983951, 47816.07767640849, 67617.0155448617, 13282.999348292438, 24671.107714415415, 41869.85905559219, 35394.213074080915, 31588.6713510167, 9469.473456163696, 11116.307163685275, 58376.15847137206, 61121.83120106507, 53894.59599452107, 57573.539344778685, 17651.82042768171, 8966.307014689282, 35710.220936529884, 61837.257002978935, 39463.14681149058, 18390.61184379203, 9384.379751903267, 32375.320062981456, 41587.66786232295, 36938.72031139185, 56928.97235660158, 55415.00574202895, 53827.792865034724, 11862.938012702563, 44534.454854219905, 35666.14977877309, 10726.530083321983, 61029.27093182092, 56508.26805402271, 19435.20484740911, 9678.683208975835, 19609.52143957559, 55901.66759456145, 58243.27060892363, 39200.29973557414, 32068.08737440817, 10937.996396960929, 49268.46989053938, 9514.304987626969, 7242.5109294929825, 10743.19287975935, 9202.615839500108, 18857.417371118165, 50461.57683653979, 51696.206431317885, 41527.197042644846, 32409.499767175417, 38642.89555434217, 46506.99464767938, 9144.68703972007, 47117.008204210455, 49019.36859236582, 55728.10132780653, 9666.32719340344, 11777.391322489924, 29971.903783612062, 57922.40959262911, 53464.37021950372, 42201.939920688186, 42395.45879157343, 11230.907762749297, 61661.35866372036, 11647.928120934363, 6878.781212589853, 66237.51755029388, 37339.63420134628, 35485.98593382442, 36104.86385775514, 34299.938016517444, 9546.04563503715, 11543.183760771468, 47303.56415217411, 48907.27073106221, 10378.223044584596, 10770.881347466415, 40624.51305316154, 64517.64856042277, 12272.465808160425, 51416.908304980054, 40437.73009625558, 33702.61779371396, 38368.35401197897, 34729.89077801021, 11579.867951602135, 37803.59016044929, 33932.25463831538, 41673.8395543094, 37553.64375851888, 39278.766508103676, 9325.996856202635, 54370.137557895185, 46585.06413538846, 64660.33535267343, 50900.61494951601, 10439.38467226404, 9156.276583115488, 10177.789718049991, 9149.721996758017, 15278.70965979927, 53596.70402266675, 8888.671912686868, 46031.75754362583, 49195.87860189616, 33557.15068309184, 19325.55411859109, 40386.62363528928, 9174.118563996424, 29022.41839530417, 11739.131006414418, 59979.39281571831, 47228.65821623257, 57572.510855596534, 50647.66340635755, 57011.28047424234, 41936.261478677225, 11300.398363810944, 11895.225345345636, 10439.522488792423, 18689.528655825852, 35804.263885674685, 36787.52121668496, 60082.91166841709, 17718.972832629497, 61497.299569441195, 9466.961781429516, 43647.147508068054, 42634.573783663065, 36508.799789830824, 21317.66213678684, 11817.164038803397, 19151.13442340493, 9738.603356828593, 13021.410842124118, 39076.59377063225, 33262.6543524462, 39147.70567879997, 50888.72103678683, 58641.00147419492, 18336.514581297808, 7109.995291181778, 61173.1663907232, 8610.63580374089, 9431.719262201745, 10670.700811335208, 9013.90556467614, 10661.096235144483, 9230.672998590804, 11515.124298729217, 28837.28852895899, 48755.89564404483, 42445.38876793804, 48936.86258244155, 9624.684291831398, 58152.993262141834, 43216.45867693359, 10572.674843011133, 10342.159391205681, 43780.82559782485, 31711.935467727006, 56987.32233855049, 11435.57243757972, 60604.18888794746, 11481.481823317012, 47717.27052766495, 7196.782202442051, 6629.431738031291, 44063.28198279571, 54190.07026283405, 9375.29710843331, 60767.55585206728, 54711.86959664297, 38321.454656574206, 9821.81131529702, 13989.976358180447, 16714.40386322188, 18628.813489036198, 52143.6788446198, 38835.69494322237, 46085.02861578186, 45139.83396873267, 41749.55143098559, 9524.92661691022, 58062.17872433649, 49083.10330586219, 32878.50187357147, 9760.198937162193, 55832.418109618324, 15548.312145063144, 64432.04794734522, 11093.612240442404, 11672.324104943627, 38363.345488570165, 37287.39140242737, 11519.118388160729, 10672.02854425897, 48936.537254142204, 10167.93069332851, 11701.004008657852, 11758.828120368864, 19198.806493935343, 10962.258481207355, 40031.19824444798, 57198.18384629529, 12951.044060038126, 63179.772446084695, 19139.111575237486, 51668.99422435564, 45639.51401890709, 9247.060695963813, 15496.316149147417, 33405.99035714327, 46307.57412159395, 9636.965527050057, 19259.97047153096, 9463.361414311787, 8731.848525870651, 43753.217862646314, 11286.541942043945, 32957.908782655926, 33451.38340714534, 45015.46554608543, 10484.470392265588, 10260.0177277544, 34149.98981477412, 65648.97779110243, 56294.728558586925, 18360.693300385865, 35587.489202735545, 9312.780104497786, 57237.66113709043, 44848.69344950499, 65005.64515956679, 61165.63564211521, 7495.393587498606, 11949.610970628193, 59988.02095852983, 9288.061774486938, 8744.430287016561, 36988.928510667356, 7059.92622475854, 39547.08408135567, 47898.487027633135, 43091.04144756922, 47879.47343992101, 9526.50759300584, 41001.70957801974, 40192.75912143141, 9131.767275081993, 59014.92563205099, 47694.530502251764, 10527.58784673943, 22805.65580598891, 9283.08601265873, 9059.962506871727, 42856.855164224515, 43587.22305058473, 59911.020594847316, 46551.48747675472, 7683.867415083342, 9185.166540651147, 49091.81488232977, 37685.71798174826, 62541.08693293518, 58706.81559311396, 33064.78676701507, 18169.95420978285, 34150.81876737221, 38193.619141943964, 10359.445216989981, 15686.905986213233, 35968.993667970346, 37852.57902803263, 63933.835442599324, 38775.17558840679, 50530.4580645934, 52328.5359126325, 58817.3738884188, 43119.79214308028, 11495.899975689872, 9776.20299178848, 12928.072296348406, 8788.466749414652, 9234.314674712627, 9469.533297509908, 7294.488875121554, 9003.240557621584, 39331.84654059453, 47777.762019063, 37983.151499406464, 9087.407312582163, 38442.99174588676, 6864.694257006497, 58459.25551667463, 61315.197932766816, 38232.17873217708, 23794.79330262859, 16265.149252483357, 9662.858709002241, 63130.94235171542, 6842.038597634602, 49849.378713583144, 42298.341116872325, 42802.13717474142, 50663.48710213215, 6859.424923721944, 7758.230255185947, 37372.2926803477, 23863.85484171969, 11908.708923246453, 57060.40665471088, 9203.371435179699, 15553.331701081443, 47371.03933236471, 33704.53847440508, 9427.120373393418, 16326.81487507908, 10927.150310293275, 11571.487980683192, 32933.578199292395, 23120.57055156752, 38076.49382252028, 13106.04601925958, 29352.12679194895, 50577.45746915202, 9282.913638839902, 35881.11137137543, 47387.212167697246, 63228.21382584213, 47335.42029920565, 9345.960907722063, 9163.159654576915, 8884.407813577056, 11682.851469154939, 48266.62707279063, 9342.376492626678, 18262.058384653155, 56377.63347790987, 38210.80521759389, 42401.895597489434, 18807.09540322016, 62283.19805587354, 39751.58457509862, 32383.78112696872, 38833.34026455532, 27424.538954606684, 48981.4413932161, 11465.002564032086, 31399.653128682126, 57812.96915967891, 61247.38494217787, 48410.564656309325, 18564.986455688137, 48181.87627260008, 13720.361465146289, 48691.894831704405, 36903.304906778896, 56134.41738866435, 44495.20979327958, 63576.676041048275, 33128.34752861149, 39914.82975848789, 9136.483376363976, 11398.671060896633, 49260.232321130694, 57452.43178503547, 58897.84698299794, 58228.802623466196, 35669.90668663349, 46195.21830082935, 11719.26352395155, 41862.3609856517, 9253.630980242333, 47414.1862550079, 9566.777187205966, 11768.127742240009, 46311.00189857689, 42247.83595326771, 35714.75202018067, 49242.302324071476, 34977.527801962424, 11676.385305081287, 48282.97113857447, 10605.95779130622, 10197.459822768922, 37520.31767547438, 46780.902304688214, 48823.05520964915, 48933.689151311635, 8839.130663273247, 30928.211908849244, 55125.460337680444, 7538.557687279841, 46319.65108805251, 9535.93879573746, 31515.575966658354, 34607.293274083386, 9645.227869360308, 46970.057050727024, 17819.75743096837, 46328.6963654447, 45196.488277558245, 57200.30029871162, 42932.94659595412, 39279.41286897885, 56386.856853152145, 9959.166416261767, 39232.74997140346, 6857.538537511484, 9874.898681832236, 36254.713079410845, 40073.495362369824, 11812.094307268515, 9298.360829121417, 51965.5664304852, 33008.226203489285, 49338.78465183332, 63153.230193019495, 47940.6079149608, 10787.58020807624, 60448.56251258625, 9662.70587254818, 46653.52639939581, 37494.71762460426, 9691.825138917147, 50774.067814743, 13060.79221208406, 38903.69354800599, 32023.973901774916, 7382.793144116689, 36680.06820180283, 10230.154699360752, 54584.86994699455, 11350.753473213, 56038.72775892988, 48727.45120080115, 56335.035460511535, 13778.637638352931, 57634.92869447539, 46807.04861642627, 17829.934958345126, 14818.45891122149, 63247.20896127831, 32507.738707026845, 7342.291601148024, 11752.146863919786, 41283.25900104565, 42475.543220951215, 56288.94534001195, 43981.87732717414, 62807.12323259299, 58668.628336761, 18711.226549886927, 31726.038833909817, 9240.76251972468, 61583.77443961336,
        48186.53275704722, 54010.93747374405, 35456.124660766836, 37456.00772548642, 34082.20604904424, 7035.261503989225, 36595.4647692826, 46995.16417095979, 43628.13953235228, 49145.21725849885, 58065.644024815316, 37000.98249864199, 55033.100480447036, 38514.00853622455, 9360.247968201687, 40825.381940449704, 9168.402736564132, 33677.566235922626, 41010.37519836549, 52739.800166345514, 27125.384120651503, 40378.20254971114, 57748.79317378856, 52526.86659704657, 47229.070650876114, 37281.91809217662, 9132.908369533492, 49913.26314398822, 8824.818413551968, 11063.2523862591, 13558.361795524168, 48607.8745224845, 11083.99836119821, 33950.786555181, 46531.140860530526, 9297.479635872663, 56600.74528738432, 8604.75159101983, 44802.60640249699, 57432.100227087576, 57828.511814425874, 49161.99070957517, 65061.05440696283, 47025.00323011282, 39669.423812004505, 48532.23678981703, 36774.00714224005, 42247.355729006355, 9094.318072166905, 49518.57748790696, 37340.6792659422, 44647.57760300116, 49787.33995949672, 43336.861233242744, 18753.288921684914, 11181.917508034885, 67145.37493537061, 17140.27555252362, 56507.759439869595, 31919.393922554555, 10125.014956069688, 34199.51981036302, 11418.254756916149, 51733.075539032034, 9773.02951309516, 43859.32614724109, 40815.96185478254, 36870.440166930995, 33938.33587810088, 61601.74357204975, 18058.027339569555, 36816.50808203406, 7774.281554448049, 11325.5515272739, 46992.665450048495, 49250.54486971799, 47885.871989417064, 41061.81589384987, 43120.85451108056, 30445.52586511351, 31943.136467863093, 10223.784106392732, 44383.88805541707, 57669.3035269179, 10904.916526918994, 6732.852018394612, 14101.716050813722, 35171.486304850056, 15984.673784156614, 9139.903276297824, 11495.584995733887, 49238.13690672487, 35546.98596483364, 60603.65586738653, 49002.70376627545, 49934.5282762881, 44970.163459946736, 33928.13421837147, 32273.51735032927, 53785.96717237922, 33455.55127272261, 9399.767217129216, 40296.5290038294, 38555.53446121157, 38732.93701302586, 47725.14804631933, 57487.985880422195, 37852.52514106289, 51191.1246964079, 34556.8421269449, 51313.09262027362, 54410.85629451601, 47124.25422469402, 47088.85313451467, 35834.4744744042, 41756.66232397826, 57361.56904328887, 35787.07740523232, 45938.02427172366, 37289.43252210222, 9258.667161007706, 34675.44910530336, 56020.4877195857, 62017.972725178704, 35581.64226773201, 57848.77353712989, 40707.6824143097, 10546.65625537982, 44459.59162774341, 54533.40388242691, 43225.404677435734, 61572.14043422243, 61809.02394427028, 46518.94118660236, 11864.905810156475, 34213.59993217662, 47815.96175554316, 33971.297749757956, 50852.860259540656, 9796.494527024528, 9309.29535940684, 59139.779279527174, 46745.03462296988, 50013.02994694588, 40562.98694982819, 11426.105544220427, 43910.929986443094, 46569.56483, 9166.486360416233, 50133.1073963654, 36306.409440464704, 10784.94940309411, 56830.253335076224, 17138.029512395206, 19208.398191994624, 43226.65026980921, 42777.211020482355, 9925.751397476346]
    // for (let ts = 0; ts < numTimeIntervals * timeInterval; ts += timeInterval) {
    //     //Add random data for each of the currencies to the database
    //     currencyData.forEach(currency => {

    //         //Add time stamp to currency x array
    //         let date = new Date(startTimestamp + ts);
    //         currency.x.push(date);

    //         //Add price to currency y array
    //         // currency.y.push(currency.averagePrice * (1 + 0.1 * (Math.random() - 0.5)));
    //     });
    // }
    // currencyData[0].y = btc;

    // sendMessage("bitcoin");

    // let currencyData = [
    //     { name: "bitcoin", x: [], y: [] },
    //     // {name: "ethereum", averagePrice: 128, x: [], y: [67617.0155448617,13282.999348292438,24671.107714415415,41869.85905559219,35394.213074080915,31588.6713510167,9469.473456163696,11116.307163685275,58376.15847137206,61121.83120106507,53894.59599452107,57573.539344778685,17651.82042768171,8966.307014689282,35710.220936529884,61837.257002978935,39463.14681149058,18390.61184379203,9384.379751903267,32375.320062981456,41587.66786232295,36938.72031139185,56928.97235660158,55415.00574202895,53827.792865034724,11862.938012702563,44534.454854219905,35666.14977877309,10726.530083321983,61029.27093182092,56508.26805402271,19435.20484740911,9678.683208975835,19609.52143957559,55901.66759456145]},
    //     // {name: "litecoin", averagePrice: 31, x: [], y: [11181.917508034885,67145.37493537061,17140.27555252362,56507.759439869595,31919.393922554555,10125.014956069688,34199.51981036302,11418.254756916149,51733.075539032034,9773.02951309516,43859.32614724109,40815.96185478254,36870.440166930995,33938.33587810088,61601.74357204975,18058.027339569555,36816.50808203406,7774.281554448049,11325.5515272739,46992.665450048495,49250.54486971799,47885.871989417064,41061.81589384987]},
    //     // {name: "tron", averagePrice: 0.03, x: [], y: [48607.8745224845,11083.99836119821,33950.786555181,46531.140860530526,9297.479635872663,56600.74528738432,8604.75159101983,44802.60640249699,57432.100227087576,57828.511814425874,49161.99070957517,65061.05440696283,47025.00323011282,39669.423812004505,48532.23678981703,36774.00714224005,42247.355729006355,9094.318072166905,49518.57748790696,37340.6792659422,44647.57760300116,49787.33995949672,43336.861233242744,18753]}
    // ];

    // currencyData.y.length = 0;
    // currencyData.x.length = 0;
    currencyData[0].y = price;
    currencyData[0].x = ts;

    // console.log(btc);

    // currency = currencyData[0];
    //     console.log("size:" +currency.y.length);
    //     for (i = 0; i < currency.y.length; i++) {

    //         currency.x[i] = i;
    //         // console.log("x:" +currency.x[i] +"y:" +currency.y[i]);
    //     }



    // console.log(currencyData);
    //Remove average price property - we only needed it to generate data
    // currencyData.forEach(currency => {
    //     delete currency.averagePrice;
    // });

    //Log final result and return
    //console.log(currencyData);

    return currencyData;
}

// let connection = new WebSocket("wss://8l4cwqyls2.execute-api.us-east-1.amazonaws.com/production");
//Plots randomly generate crypto data
function reqData(msgText) {
    sendMessage(msgText)
    plotData();
    // console.log("sent");

}
function plotData() {
    //Get test data
    // console.log("plot");
    let currencyData = getCurrencyData();

    
    //Work through the four currencies
    currencyData.forEach(currency => {
        //Specify how chart should be drawn
        let trace = {
            x: currency.x,
            y: currency.y,
            mode: 'lines',
            name: currency.name,
            type: 'scatter',
            marker: {
                color: 'rgb(21, 64, 82)',
                size: 1
            }
        };

        //Get reference to Div where chart will be drawn
        let chartDiv = document.getElementById("crypto" + "Div");

        //Upper case the start of the currency name and create title of chart
        let chartTitle = currency.name.charAt(0).toUpperCase() + currency.name.slice(1);
        
        console.log("y-axis:" +currency.y[(currency.y.length)-1])        //Set up graph
        let layout = {
            title: chartTitle,
            xaxis: {
                title: 'Time'
            },
            yaxis: {
                autorange: true,
               
                title: 'Price'
            }
        };

        //Data for graph is an array of lines for graph
        let data1 = [trace];

        //Plot data
        Plotly.newPlot(chartDiv, data1, layout);
        // Plotly.restyle(chartDiv, 'y', data1);
        // remove at index 1
        // Plotly.newPlot(chartDiv, data1, layout);
        // Plotly.deleteTraces(chartDiv, 0); 
        // Plotly.addTraces(chartDiv, data1);
        // Plotly.newPlot(chartDiv, data1, layoust);
    });
}

//Plot data when window first loads
// window.onload = plotData;
// window.onload = sendMessage("bitcoin");

//Replot data every 1000 ms.
setInterval(plotData, 1000);
